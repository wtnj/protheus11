
/**********************************************************************************************************************************/
/** Planejamento e controle de produção - Produção e Endereçamento                                                               **/
/** Rotinas auxiliares de WMS WHB                                                                                                **/
/** RSAC Soluções Ltda.                                                                                                          **/
/** WHB Usinagem                                                                                                                 **/
/**********************************************************************************************************************************/
/** Data       | Responsável                    | Descrição                                                                      **/
/**********************************************************************************************************************************/
/** 23/05/2011 | Rogério Souza Pereira          | Criação da rotina/procedimento.                                                **/
/**********************************************************************************************************************************/
#include "rwmake.ch"
#include "tbiconn.ch"
#include "topconn.ch"
#include "protheus.ch"
#include "fileio.ch"      


/**********************************************************************************************************************************/
/** user function WsEndProd( cNumOp, cEnder, cQtde, cCodEmp, cCodFil )                                                           **/
/** executa o endereçamento dos movimentos de produção                                                                           **/
/**********************************************************************************************************************************/
user function WsEndProd( cNumOp, cEnder, cQtde, cCodEmp, cCodFil )

  // variaveis auxiliares
  local cRet := ""
  local cQr := ""
  local aArea := GetArea()
  local aSdaRecno := {}
  local nSaldoSda := 0
  local nQtdeEnd := Val(cQtde)
  local nResta := 0
  local nI := 0
  local cItemEnd := ""
  local cItemAnt := ""
  local aCab := {}
  local aItens := {}
  local lErro := .F.
  local nTotAEnd := 0
	private lMSHelpAuto := .T.
	private lMSErroAuto := .F.


  // prepara o ambiente
  prepare environment empresa cCodEmp filial cCodFil modulo "PCP"
   
  // tenta localizar o endereço
  SBE->(DbSetOrder(1))
  if SBE->(DbSeek(XFilial("SBE") + cEnder))
    cEnder := Substr(cEnder, 3, Len(cEnder) - 2)
  endIf
  

  // recupera os itens a endereçar pendentes da OP
  cQr := " select SDA.R_E_C_N_O_ DA_RECNO,
  cQr += "        SDA.DA_SALDO
  cQr += "   from " + RetSqlName("SD3") + " SD3,
  cQr += "        " + RetSqlName("SDA") + " SDA 
  cQr += "  where SD3.D_E_L_E_T_ = ' '
  cQr += "    and SDA.D_E_L_E_T_ = ' '
  cQr += "    and SD3.D3_FILIAL = '" + XFilial("SD3") + "'
  cQr += "    and SDA.DA_FILIAL = '" + XFilial("SDA") + "'
  cQr += "    and SDA.DA_PRODUTO = SD3.D3_COD
  cQr += "    and SDA.DA_QTDORI = SD3.D3_QUANT
  cQr += "    and SDA.DA_LOTECTL = SD3.D3_LOTECTL
  cQr += "    and SDA.DA_NUMLOTE = SD3.D3_NUMLOTE
  cQr += "    and SDA.DA_LOCAL = SD3.D3_LOCAL
  cQr += "    and SDA.DA_DOC = SD3.D3_DOC
  cQr += "    and SDA.DA_ORIGEM = 'SD3'
  cQr += "    and SDA.DA_NUMSEQ = SD3.D3_NUMSEQ
  cQr += "    and SD3.D3_OP = '" + cNumOp + "'
  cQr += "    and SD3.D3_TM = '" + GetNewPar("MV_TMPAD", "") + "'
  cQr += "    and SDA.DA_SALDO > 0

  TcQuery cQr new alias "QSDA"
  RestArea(aArea)
        
  nSaldoSda := 0
  while !QSDA->(Eof())
    
    // adiciona o recno ao array
    AAdd(aSdaRecno, QSDA->DA_RECNO)
    nSaldoSda += QSDA->DA_SALDO
  
    // proximo registro
    QSDA->(DbSkip())
    
  endDo
  
  // fecha a query
  QSDA->(DbCloseArea())

            
  // valida se a quantidade informada é superior ao saldo a endereçar
  if nQtdeEnd > nSaldoSda
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>Quantidade informada superior ao saldo a enderecar!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
		return cRet
  endIf

  
  // executa o endereçamento dos registros
  begin transaction

  nResta := nQtdeEnd
  for nI := 1 to Len(aSdaRecno)
  
    // posiciona o SDA
    SDA->(DbGoTo(aSdaRecno[nI]))

    // recupera o item de endereçamento
	  cItemEnd := GetItemEnd( SDA->DA_PRODUTO, SDA->DA_LOCAL, SDA->DA_DOC, SDA->DA_ORIGEM, SDA->DA_LOTECTL, SDA->DA_NUMSEQ )
	  cItemAnt := StrZero( Val(cItemEnd) - 1, TamSx3("DB_ITEM")[01] )
        
    // atualiza o total a endereçar
    if nResta > SDA->DA_SALDO
      nTotAEnd := SDA->DA_SALDO
    else
      nTotAEnd := nResta
    endIf
    
	  // monta o array de cabeçalho
	  aCab := {}
	  AAdd( aCab, {"DA_PRODUTO", SDA->DA_PRODUTO, nil} )
	  AAdd( aCab, {"DA_QTDORI", SDA->DA_QTDORI, nil} )
	  AAdd( aCab, {"DA_SALDO", SDA->DA_SALDO, nil} )
	  AAdd( aCab, {"DA_DATA", SDA->DA_DATA, nil} )
	  AAdd( aCab, {"DA_LOTECTL", SDA->DA_LOTECTL, nil} )
  	AAdd( aCab, {"DA_NUMLOTE", SDA->DA_NUMLOTE, nil} )
		AAdd( aCab, {"DA_LOCAL", SDA->DA_LOCAL, nil} )
		AAdd( aCab, {"DA_DOC", SDA->DA_DOC, nil} )
		AAdd( aCab, {"DA_SERIE", SDA->DA_SERIE, nil} )
		AAdd( aCab, {"DA_CLIFOR", SDA->DA_CLIFOR, nil} )
		AAdd( aCab, {"DA_LOJA", SDA->DA_LOJA, nil} )
		AAdd( aCab, {"DA_TIPONF", SDA->DA_TIPONF, nil} )
		AAdd( aCab, {"DA_ORIGEM", SDA->DA_ORIGEM, nil} )
		AAdd( aCab, {"DA_NUMSEQ", SDA->DA_NUMSEQ, nil} )
		AAdd( aCab, {"DA_QTSEGUM", SDA->DA_QTSEGUM, nil} )
		AAdd( aCab, {"DA_QTDORI2", SDA->DA_QTDORI2, nil} )
					  
		// monta o array de itens
		aItens := {}
		AAdd( aItens, {"DB_ITEM", cItemEnd, nil} )
		AAdd( aItens, {"DB_LOCALIZ", Padr(cEnder, 15), nil} )
		AAdd( aItens, {"DB_NUMSERI", Space(TamSx3("DB_NUMSERI")[01]), nil} )
		AAdd( aItens, {"DB_QUANT", nTotAEnd, nil} )
		AAdd( aItens, {"DB_HRINI", Time(), nil} )
		AAdd( aItens, {"DB_DATA", Date(), nil} )
		AAdd( aItens, {"DB_ESTORNO", " ", nil} )
		AAdd( aItens, {"DB_QTSEGUM", ConvUm(SDA->DA_PRODUTO, nTotAEnd, 0, 2), nil} )
				
    // executa o endereçamento               
		lMsErroAuto := .F.
		MsExecAuto( {|x, y, z| mata265(x, y, z)}, aCab, {aItens}, 3 )
			
		// verifica se o movimento foi endereçado
		if ( lMsErroAuto )						  
		  // erro no procedimento
	 	  cRet := "<ParamOk>NO</ParamOk>
	 	  cRet += "<MsgRet>Erro na rotina automatica! Verifique os logs do sistema!</MsgRet>
	 	  cRet += "<DadosRet></DadosRet>
			lErro := .T.
			Exit
		else
		  // atualiza o saldo pendente de endereçamento
		  nResta -= nTotAEnd
		endIf  
  
  next nI
                                     

  if lErro              
    // faz o rollback do procedimento
    DisarmTransactions()  
  else
    // procedimento concluido
 	  cRet := "<ParamOk>OK</ParamOk>
 	  cRet += "<MsgRet>Enderecamento executado com sucesso!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
  endIf

  
  end transaction


return cRet


/**********************************************************************************************************************************/
/** static function GetItemEnd( cCodProd, cLocal, cDoc, cOrigem, cContain, cNumSeq )                                             **/
/** Recupera o proximo item a endereçar                                                                                          **/
/**********************************************************************************************************************************/
static function GetItemEnd( cCodProd, cLocal, cDoc, cOrigem, cContain, cNumSeq )

  // retorno da função
  local cRet := ""

  // query
  local cQr := ""
  
  // area
  local aArea := GetArea()


  // monta a query para recuperar o proximo item
  cQr := " select max(SDB.DB_ITEM) DB_ITEM
  cQr += "   from " + RetSqlName("SDB") + " SDB
  cQr += "  where SDB.D_E_L_E_T_ = ' '
  cQr += "    and SDB.DB_FILIAL = '" + XFilial("SDB") + "'
  cQr += "    and SDB.DB_PRODUTO = '" + cCodProd + "'
  cQr += "    and SDB.DB_LOCAL = '" + cLocal + "'
  cQr += "    and SDB.DB_DOC = '" + cDoc + "'
  cQr += "    and SDB.DB_ORIGEM = '" + cOrigem + "'
  cQr += "    and SDB.DB_LOTECTL = '" + cContain + "'
  cQr += "    and SDB.DB_NUMSEQ = '" + cNumSeq + "'

  TcQuery cQr new alias "QITE"
  RestArea(aArea)
  
  // busca o proximo item
  if ( Empty(QITE->DB_ITEM) )
    cRet := StrZero( 1, TamSx3("DB_ITEM")[01] )
  else
    cRet := StrZero( Val(QITE->DB_ITEM) + 1, TamSx3("DB_ITEM")[01] ) 
  endIf

  // fecha a query
  QITE->(dbCloseArea())

return cRet



/**********************************************************************************************************************************/
/** static function ( cUsrName, cPasswd )                                                                                 **/
/** executa o login no ambiente do protheus                                                                                      **/
/**********************************************************************************************************************************/
user function WsApoProd( cNumOp, cQtde, cDtEmis, cCodEmp, cCodFil )

  // variáveis auxiliares
  local cRet := ""
  local nQtde := Val(cQtde)
  local cD3Parc := ""
  local dDtEmis := Stod(cDtEmis)
  local cLoteCtl := ""
	private lMSHelpAuto := .T.
	private lMSErroAuto := .F.


	//verifica se veio vi arequisição httpGet via Apw
	If Type('lWmsApl')!="L"
  			conout('VIA APW')
		  	cNumOp = HttpGet->cNumOp
		  	cQtde = HttpGet->cQtde
		  	cDtEmis = HttpGet->cDtEmis
		  	cCodEmp = HttpGet->cCodEmp
		  	cCodFil = HttpGet->cCodFil
 	else
  		conout('VIA APL')
		  // prepara o ambiente   
	endif
	
  //Conecta ambiente
  If	Select('SX2') == 0
		RPCSetType( 3 )						//Não consome licensa de uso
		conout("Preparando ambiente utilizando empresa " + cCodEmp + " filial " + cCodFil)
		RpcSetEnv(cCodEmp,cCodFil,,,,GetEnvServer(),{ "SM2" })
		lAuto := .T.
  EndIf	
	


	// posiciona a OP
	SC2->(DbSetOrder(1))
	if ( !SC2->(DbSeek(XFilial("SC2") + cNumOp)) )
		// OP nao encontrada
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>OP nao localizada!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
		return cRet
	endIf
		  
	  
	// verifica se a quantidade a apontar é maior que o saldo da OP
	if ( nQtde > (SC2->C2_QUANT - SC2->C2_QUJE) )
		// quantidade superior
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>Apontamentos a efetivar superior ao saldo da OP (Saldo: " + AllTrim(Transform(SC2->C2_QUANT - SC2->C2_QUJE, PesqPict("SC2", "C2_QUANT"))) + ")</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
		return cRet
	endIf
		  
	// posiciona o produto
	SB1->(DbSetOrder(1))
	if !SB1->(DbSeek(XFilial("SB1") + SC2->C2_PRODUTO))
		// produto nao localizado
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>Produto nao localizado!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
		return cRet
	endIf
	      
	// define o lote
	if Empty(SB1->B1_FORMLOT)
		cLoteCtl := CriaVar("D3_LOTECTL")
	else
		cLoteCtl := Formula(SB1->B1_FORMLOT)
	endIf
	ConOut("Lote: " + cLoteCtl)
	
	// tipo do apontamento
	cD3Parc := Iif( nQtde < (SC2->C2_QUANT - SC2->C2_QUJE) , "P", "T" )
		    
	// ok, monta a execucao da rotina automatica
	aSd3 := { {"D3_FILIAL", XFilial("SD3"), nil} ,;
						{"D3_COD", SC2->C2_PRODUTO, nil} ,;
						{"D3_UM", SC2->C2_UM, nil} ,;
						{"D3_QUANT", nQtde, nil} ,;
						{"D3_OP", cNumOp, nil} ,;
						{"D3_EMISSAO", dDtEmis, nil} ,;
						{"D3_LOCAL", SC2->C2_LOCAL, nil} ,;
						{"D3_TM", GetNewPar("MV_TMPAD", ""), nil} ,;
						{"D3_LOTECTL", cLoteCtl, Nil} ,;
						{"D3_PARCTOT", cD3Parc, nil} }
								   
	lMSHelpAuto := .T.
	lMSErroAuto := .F.
		         
  // verifica o flag para gerar o SD3
  MSExecAuto( { |x,y| mata250(x,y) }, aSd3, 3)  
		
	if ( lMSErroAuto )
		// erro no procedimento automatico
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>Erro na execucao da rotina automatica. Verifique os logs do sistema!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
 	else
		// apontamento ok
 	  cRet := "<ParamOk>OK</ParamOk>
 	  cRet += "<MsgRet>Apontamento concluido com sucesso!</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
	endIf    


return cRet


/**********************************************************************************************************************************/
/** static function WsLogin( cUsrName, cPasswd )                                                                                 **/
/** executa o login no ambiente do protheus                                                                                      **/
/**********************************************************************************************************************************/
user function WsLogin( cUsrName, cPasswd, cCodEmp, cCodFil )
  
  // flag de password ok
  local lPasswdOk := .F.
  
  // retorno da função
  local cRet := ""   
     
  // array de senha
  local aPswReg := {}
  
  // empresas autorizadas
  local cEmpAut := ""
       
  // código do usuário
  local cCodUsr := ""
  
  // array de empresas liberadas
  local aEmp := {}
  local aEmprx := {}

  // contador de loop
  local nI := 0
  local nA := 0
  
  // variaveis utilizadas no login do protheus
  private cEmpAnt := cCodEmp
  private cFilAnt := cCodFil
  private dDatabase := MsDate()
  private __cInternet := nil
  
  // prepara o ambiente
  prepare environment empresa cCodEmp filial cCodFil modulo "PCP"

  
  // abre a tabela de empresas e parametros                                  
  OpenSm0( cCodEmp )
	OpenSxs( nil, nil, .F., .F., cCodEmp, "SX6", "SX6" )
           
  // faz o login do usuário no protheus                                 
  PswOrder(2)
  if ( PswSeek(cUsrName, .T.) )

    // verifica se a senha é valida
    if ( PswName(cPasswd) )
      // senha ok, carrega o perfil do usuário no array
      aPswReg := PswRet()
      lPasswdOk := .T.
    endIf

  endIf  


  // verifica o flag para montar o retorno para o mobile
  if ( lPasswdOk )
    
    // recupera o código do usuário
    cCodUsr := PswId()

    // monta a lista de empresas autorizadas
    aEmp := AClone( aPswReg[02][06] )
    
		if ( Empty(aEmp) )
    	cRet := "ParamOk=NO|MsgRet=Usuario nao autorizado|DadosRet=|CodigoUsr="
		Else
			  
			// varre as permissões do usuário
			SM0->(dbGoTop()) 
			if ( aEmp[01] == [@@@@] )
				aEmprx := {}
				SM0->( DbEval({|| Aadd(aEmprx, SM0->M0_CODIGO + SM0->M0_CODFIL)}) )
			else
			  
			  // adiciona as empresas no array
			  for nI := 1 to len(aEmp)
			    AAdd( aEmprx, aEmp[nI] )
			  next nI
			  
			endIf
			
	    // retorna os dados na função
	    if ( Empty(aEmprx) )
    	  cRet := "<ParamOk>NO</ParamOk>
    	  cRet += "<MsgRet>Arquivo de empresas corrompido</MsgRet>
    	  cRet += "<DadosRet></DadosRet>
    	  cRet += "<CodigoUsr></CodigoUsr>
    	  cRet += "<NomeCompleto></NomeCompleto>
    	  cRet += "<Ambiente></Ambiente>
    	  cRet += "<SqlServidor></SqlServidor>
    	  cRet += "<SqlPorta></SqlPorta>
    	  cRet += "<SqlDatabase></SqlDatabase>
    	  cRet += "<SqlUsername></SqlUsername>
    	  cRet += "<SqlPassword></SqlPassword>
    	  cRet += "<TmPad></TmPad>
	    else
                       
	      // faz o loop sobre as empresas liberadas
				SM0->(dbGoTop()) 
    		cEmpAut := "<Dataset>"
	      for nI := 1 to len(aEmprx)
           
	        // posiciona a empresa
	        SM0->(dbSetOrder(1))
	        if ( SM0->(dbSeek(aEmprx[nI])) )
	          // adiciona a empresa na string de retorno
      			cEmpAut += "<Datarow>"
      			cEmpAut += "<EmpCod>" + AllTrim(SM0->M0_CODIGO) + "</EmpCod>
      			cEmpAut += "<FilCod>" + AllTrim(SM0->M0_CODFIL) + "</FilCod>
      			cEmpAut += "<EmpNome>" + AllTrim(SM0->M0_NOME) + "/" + AllTrim(SM0->M0_FILIAL) /*+ " " + AllTrim(Str(nA))*/ + "</EmpNome>" 
      			cEmpAut += "</Datarow>"
      		endIf
	          

	      next nI
        
        // finaliza o dataset
    		cEmpAut += "</Dataset>"
	      
	      // retorna os dados
    	  cRet := "<ParamOk>OK</ParamOk>
    	  cRet += "<MsgRet>Acesso permitido</MsgRet>
    	  cRet += "<DadosRet>" + cEmpAut + "</DadosRet>
    	  cRet += "<CodigoUsr>" + cCodUsr + "</CodigoUsr>
    	  cRet += "<NomeCompleto>" + AllTrim(aPswReg[1][4]) + "</NomeCompleto>
    	  cRet += "<Ambiente>" + AllTrim(GetEnvServer()) + "</Ambiente>
    	  cRet += "<SqlServidor>" + AllTrim(GetNewPar("MV_SQLSERV", "")) + "</SqlServidor>
    	  cRet += "<SqlPorta>" + AllTrim(GetNewPar("MV_SQLPORT", "")) + "</SqlPorta>
    	  cRet += "<SqlDatabase>" + AllTrim(GetNewPar("MV_SQLDATA", "")) + "</SqlDatabase>
    	  cRet += "<SqlUsername>" + AllTrim(GetNewPar("MV_SQLUSER", "")) + "</SqlUsername>
    	  cRet += "<SqlPassword>" + AllTrim(GetNewPar("MV_SQLPASS", "")) + "</SqlPassword>
    	  cRet += "<TmPad>" + AllTrim(GetNewPar("MV_TMPAD", "")) + "</TmPad>
	      
	    endIf
	    
		endIf
		    
  else
 	  cRet := "<ParamOk>NO</ParamOk>
 	  cRet += "<MsgRet>Usuario ou senha invalidos</MsgRet>
 	  cRet += "<DadosRet></DadosRet>
 	  cRet += "<CodigoUsr></CodigoUsr>
    cRet += "<NomeCompleto></NomeCompleto>
    cRet += "<Ambiente></Ambiente>
 	  cRet += "<SqlServidor></SqlServidor>
 	  cRet += "<SqlPorta></SqlPorta>
 	  cRet += "<SqlDatabase></SqlDatabase>
 	  cRet += "<SqlUsername></SqlUsername>
 	  cRet += "<SqlPassword></SqlPassword>
 	  cRet += "<TmPad></TmPad>
  endIf

return cRet